import { promises as fs } from 'fs';
import path from 'path';
import { dbHelpers } from './db';

export interface EnvVariable {
  key: string;
  value: string;
}

class EnvironmentManager {
  private envsDirectory: string;

  constructor() {
    this.envsDirectory = '/var/www/envs';
  }

  /**
   * Get the path to an app's environment file
   */
  private getEnvFilePath(appName: string): string {
    return path.join(this.envsDirectory, `liteshift-${appName}.env`);
  }

  /**
   * Ensure the envs directory exists
   */
  private async ensureEnvsDirectory(): Promise<void> {
    try {
      await fs.mkdir(this.envsDirectory, { recursive: true });
    } catch (error) {
      throw new Error(`Failed to create envs directory: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Generate environment file content from database
   */
  private async generateEnvContent(appId: number): Promise<string> {
    const envVars = dbHelpers.getAppEnvVars(appId) as any[];
    
    let content = `# Environment variables for LiteShift app\n`;
    content += `# Generated at ${new Date().toISOString()}\n`;
    content += `# Do not edit this file manually - use LiteShift dashboard\n\n`;

    for (const envVar of envVars) {
      // Escape special characters in values
      const value = this.escapeEnvValue(envVar.value);
      content += `${envVar.key}=${value}\n`;
    }

    return content;
  }

  /**
   * Escape environment variable values for shell compatibility
   */
  private escapeEnvValue(value: string): string {
    // If value contains spaces, quotes, or special characters, wrap in quotes
    if (/[\s"'$`\\]/.test(value)) {
      // Escape existing quotes and wrap in double quotes
      return `"${value.replace(/["\\]/g, '\\$&')}"`;
    }
    return value;
  }

  /**
   * Create environment file for an app
   */
  async createEnvFile(appName: string): Promise<void> {
    const app = dbHelpers.getAppByName(appName);
    if (!app) {
      throw new Error(`App ${appName} not found`);
    }

    await this.ensureEnvsDirectory();
    
    const envFilePath = this.getEnvFilePath(appName);
    const content = await this.generateEnvContent((app as any).id);
    
    try {
      await fs.writeFile(envFilePath, content, 'utf8');
    } catch (error) {
      throw new Error(`Failed to create environment file: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Update environment file for an app
   */
  async updateEnvFile(appName: string): Promise<void> {
    const app = dbHelpers.getAppByName(appName);
    if (!app) {
      throw new Error(`App ${appName} not found`);
    }

    const envFilePath = this.getEnvFilePath(appName);
    
    // Check if file exists
    try {
      await fs.access(envFilePath);
    } catch {
      // File doesn't exist, create it
      await this.createEnvFile(appName);
      return;
    }

    const content = await this.generateEnvContent((app as any).id);
    
    try {
      await fs.writeFile(envFilePath, content, 'utf8');
    } catch (error) {
      throw new Error(`Failed to update environment file: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Delete environment file for an app
   */
  async deleteEnvFile(appName: string): Promise<void> {
    const envFilePath = this.getEnvFilePath(appName);
    
    try {
      await fs.unlink(envFilePath);
    } catch (error) {
      // File might not exist, which is fine
      if ((error as any).code !== 'ENOENT') {
        throw new Error(`Failed to delete environment file: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
  }

  /**
   * Add environment variable to database and update file
   */
  async addEnvVar(appName: string, key: string, value: string): Promise<void> {
    const app = dbHelpers.getAppByName(appName);
    if (!app) {
      throw new Error(`App ${appName} not found`);
    }

    // Add to database
    dbHelpers.setAppEnvVar((app as any).id, key, value);
    
    // Update environment file
    await this.updateEnvFile(appName);
  }

  /**
   * Update environment variable in database and update file
   */
  async updateEnvVar(appName: string, key: string, value: string): Promise<void> {
    const app = dbHelpers.getAppByName(appName);
    if (!app) {
      throw new Error(`App ${appName} not found`);
    }

    // Update in database
    dbHelpers.setAppEnvVar((app as any).id, key, value);
    
    // Update environment file
    await this.updateEnvFile(appName);
  }

  /**
   * Remove environment variable from database and update file
   */
  async removeEnvVar(appName: string, key: string): Promise<void> {
    const app = dbHelpers.getAppByName(appName);
    if (!app) {
      throw new Error(`App ${appName} not found`);
    }

    // Remove from database
    dbHelpers.deleteAppEnvVar((app as any).id, key);
    
    // Update environment file
    await this.updateEnvFile(appName);
  }

  /**
   * Get the path to an app's environment file (for external use)
   */
  getAppEnvFilePath(appName: string): string {
    return this.getEnvFilePath(appName);
  }

  /**
   * Check if environment file exists for an app
   */
  async envFileExists(appName: string): Promise<boolean> {
    const envFilePath = this.getEnvFilePath(appName);
    try {
      await fs.access(envFilePath);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * Sync all environment files for all apps
   * Useful for maintenance or migration purposes
   */
  async syncAllEnvFiles(): Promise<void> {
    const apps = dbHelpers.getAllApps() as any[];
    
    await this.ensureEnvsDirectory();
    
    for (const app of apps) {
      try {
        await this.updateEnvFile(app.name);
      } catch (error) {
        console.error(`Failed to sync env file for ${app.name}:`, error);
      }
    }
  }
}

export default new EnvironmentManager();
